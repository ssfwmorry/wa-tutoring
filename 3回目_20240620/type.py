# 配列（リスト）
box_height = 100
box_idth = 50
box_weight = 5
box = [100, 50, 5] # 変数をまとめられる、リスト。中身一つ一つを「要素」と言います
print(box)
# リストの中身を取得したいときには0,1,2,3...で先頭から指定します。＝「インデックス」と言います。
print(box[0]) # リストの1個目の要素は、0でアクセスします。（インデックスは0）
print(box[1]) # リストの2個目の要素は、1でアクセスします。（インデックスは1）
print(box[2])
box[2] = 8 # 代入もできます
print(box)

# 長さという概念があります。取得したいリストの要素を、割と柔軟にとってこれます。
print(len(box)) # 3この要素があるので3
# print(box[100]) # 長さをオーバーしたインデックスにアクセスしようとするとIndexError: list index out of rangeエラーになります
print(box[-1]) # マイナスを指定すると、最後から何個目かの要素が取得できます
print(box[0:1]) # インデックス0の要素から、インデックス1の要素の一つ手前までを取得します

# 配列（タプル）
array = ('100', '50', '5')
print(array)
# array[2] = 8 # リストは書き換えられますが、タプルは代入できません。そのほかはリストと同じです。


# 辞書
# keyとvalueで情報を保持します。
# key「ハンガー」のとき、value「吊るすもの」。という構造を保持します
dictionary = {'hanger': '吊るすもの', 'apple': '赤い果実'}
print(dictionary)
print(dictionary['hanger']) # '吊るすもの'
print(dictionary['apple']) # '赤い果実'


# 型は組み合わせられます
mix = [100, 'xxx', 6, {'a': [9, 10], 'b': 2}]
print(mix)
print(mix[3]['a']) # [9, 10]
# つまり、複雑なデータはアクセスしにくい